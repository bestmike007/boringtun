name: PR Status Checks

on:
  push:
    branches: [ "master" ]
    tags: ['*']
  pull_request:
    branches: [ "master" ]

jobs:
  # Depends on all actions that are required for a "successful" CI run.
  # Based on the ci here: https://github.com/tokio-rs/tokio/blob/master/.github/workflows/ci.yml
  all-systems-go:
    runs-on: ubuntu-latest
    needs:
      - check_features
      - clippy
      - rustfmt
      - tests
      - integration-tests
      - test-windows
    steps:
      - run: exit 0

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Check Windows
        run: cargo check -p boringtun

      - name: Test Windows
        run: cargo test -p boringtun

  check_features:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --each-feature

  clippy:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: taiki-e/install-action@cargo-hack
      - run: echo disabled cargo hack clippy --each-feature

  rustfmt:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo fmt --all --check

  tests:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: taiki-e/install-action@cargo-hack
      - run: cargo hack test --each-feature

  integration-tests:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo test -- --ignored

  release:
    needs: [tests, integration-tests]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        arch:
          - target: x86_64-unknown-linux-gnu
            name: amd64
          - target: aarch64-unknown-linux-gnu
            name: aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust with Cross
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          rustup toolchain install stable --profile minimal
          rustup target add ${{ matrix.arch.target }}
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          cargo binstall --no-confirm cross
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.arch.target }}
          cache-on-failure: true
      - name: Build Binary
        run: |
          cross build --verbose --locked --release --target ${{ matrix.arch.target }}
          mv target/${{ matrix.arch.target }}/release/boringtun-cli target/${{ matrix.arch.target }}/release/boringtun-cli-${{ matrix.arch.name }}
      - name: publish artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/${{ matrix.arch.target }}/release/boringtun-cli-${{ matrix.arch.name }}
